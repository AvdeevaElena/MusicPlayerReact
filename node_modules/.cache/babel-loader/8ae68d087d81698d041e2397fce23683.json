{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\ReactMusic\\\\reactmusic\\\\src\\\\companents\\\\MusicPlayer.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport s from './styles.css';\nconst goeasy = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\";\nconst dreams = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3\";\nconst chillout = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-10.mp3\";\nconst twistter = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-13.mp3\";\nconst freebird = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-15.mp3\";\n\nfunction getTime(time) {\n  if (!isNaN(time)) {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }\n}\n\nclass MusicPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this._isMounted = false;\n    this.state = {\n      value: \"\",\n      currentSong: null,\n      music: \"stopped\",\n      currentTime: null,\n      duration: null\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log('componentWillReceiveProps real song', nextProps.song);\n    console.log('componentWillReceiveProps value pass', this.props.song);\n    console.log('status music', this.props.music);\n    this.state.currentSong = nextProps.song;\n    this.state.music = nextProps.music;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentSong !== prevState.currentSong) {\n      let track;\n\n      switch (this.state.currentSong) {\n        case \"Go Easy\":\n          track = goeasy;\n          break;\n\n        case \"Dreams\":\n          track = dreams;\n          break;\n\n        case \"Chill Out\":\n          track = chillout;\n          break;\n\n        case \"Twistter\":\n          track = twistter;\n          break;\n\n        case \"Free Bird\":\n          track = freebird;\n          break;\n\n        default:\n          break;\n      }\n\n      if (track) {\n        this.music.src = track;\n        this.music.play();\n        this.setState({\n          music: \"playing\"\n        });\n      }\n    }\n\n    if (this.state.music !== prevState.music) {\n      if (this.state.music === \"paused\") {\n        this.music.pause();\n      }\n\n      if (this.state.music === \"playing\" && prevState.music === \"paused\") {\n        this.music.play();\n      }\n\n      if (this.state.music === \"stop\") {\n        this.music.pause();\n        this.currentTime = 0;\n        this.setState({\n          currentSong: null\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.music.removeEventListener(\"timeupdate\", () => {});\n  }\n\n  render() {\n    const currentTime = getTime(this.state.currentTime);\n    const duration = getTime(this.state.duration);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, \" Music Player\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui card main-contai[ner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \" \", this.state.value, this.state.currentSong, this.state.music))));\n  }\n\n}\n\nexport default MusicPlayer;","map":{"version":3,"sources":["C:/Users/User/ReactMusic/reactmusic/src/companents/MusicPlayer.jsx"],"names":["React","axios","s","goeasy","dreams","chillout","twistter","freebird","getTime","time","isNaN","Math","floor","slice","MusicPlayer","Component","constructor","props","_isMounted","state","value","currentSong","music","currentTime","duration","componentWillReceiveProps","nextProps","console","log","song","componentDidUpdate","prevProps","prevState","track","src","play","setState","pause","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport s from './styles.css';\r\n\r\nconst goeasy = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\";\r\nconst dreams = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3\";\r\nconst chillout =\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-10.mp3\";\r\nconst twistter =\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-13.mp3\";\r\nconst freebird = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-15.mp3\";\r\n\r\nfunction getTime(time) {\r\n  if (!isNaN(time)) {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  }\r\n}\r\n  \r\n  class MusicPlayer extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n       \r\n        super(props);\r\n        this._isMounted = false;\r\n        this.state = { value: \"\",\r\n                        currentSong: null,\r\n                        music: \"stopped\",\r\n                        currentTime: null,\r\n                        duration: null\r\n        };\r\n      }\r\n\r\n\r\n      componentWillReceiveProps(nextProps) {\r\n        console.log('componentWillReceiveProps real song', nextProps.song); \r\n        console.log('componentWillReceiveProps value pass', this.props.song);  \r\n        console.log('status music', this.props.music); \r\n\r\n        this.state.currentSong = nextProps.song;\r\n        this.state.music = nextProps.music;\r\n    }  \r\n\r\n      componentDidUpdate(prevProps, prevState) {\r\n\r\n\r\n        if (this.state.currentSong !== prevState.currentSong) {\r\n          let track;\r\n          switch (this.state.currentSong) {\r\n            case \"Go Easy\":\r\n              track = goeasy;\r\n              break;\r\n            case \"Dreams\":\r\n              track = dreams;\r\n              break;\r\n            case \"Chill Out\":\r\n              track = chillout;\r\n              break;\r\n            case \"Twistter\":\r\n              track = twistter;\r\n              break;\r\n            case \"Free Bird\":\r\n              track = freebird;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n    \r\n          if (track) {\r\n            this.music.src = track;\r\n            this.music.play();\r\n            this.setState({\r\n              music: \"playing\"\r\n            });\r\n          }\r\n        }\r\n    \r\n        if (this.state.music !== prevState.music) {\r\n          if (this.state.music === \"paused\") {\r\n            this.music.pause();\r\n          }\r\n          if (this.state.music === \"playing\" && prevState.music === \"paused\") {\r\n            this.music.play();\r\n          }\r\n          if (this.state.music === \"stop\") {\r\n            this.music.pause();\r\n            this.currentTime = 0;\r\n            this.setState({\r\n              currentSong: null\r\n            });\r\n          }\r\n        }\r\n      }\r\n    \r\n      componentWillUnmount() {\r\n        this._isMounted = false;\r\n        this.music.removeEventListener(\"timeupdate\", () => {});\r\n      }\r\n      \r\n\r\n\r\n\r\n\r\n       render() {\r\n        const currentTime = getTime(this.state.currentTime);\r\n        const duration = getTime(this.state.duration)\r\n     \r\n        return (\r\n<>\r\n        <h1 className=\"header\"> Music Player</h1>\r\n           \r\n        <div className=\"App\">\r\n          <div className=\"ui card main-contai[ner\">\r\n            <div className=\"info-container\"> {this.state.value}\r\n            {this.state.currentSong}\r\n            {this.state.music}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default MusicPlayer;"]},"metadata":{},"sourceType":"module"}